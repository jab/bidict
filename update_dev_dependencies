#!/usr/bin/env bash
#
# Copyright 2009-2024 Joshua Bronson. All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# shellcheck disable=SC2086


set -euo pipefail

log() {
  >&2 printf "> %s\n" "$@"
}


main() {
  # Keep in sync with _default_py_minor_ver in ./tox.ini and ./init_dev_env:
  declare -r _default_py_minor_ver="12"
  export DEV_PY="python3.$_default_py_minor_ver"
  if ! type "$DEV_PY"; then
    log "Error: No $DEV_PY on PATH. Hint: Check ./init_dev_env and try again."
    exit 1
  fi
  export DEV_VENV=".venv/dev"
  if [ ! -e "$DEV_VENV/bin/$DEV_PY" ]; then
    log "Error: No such file "$DEV_VENV/bin/$DEV_PY". Hint: Run ./init_dev_env and try again."
    exit 2
  fi
  if ! type "pre-commit"; then
    log "Error: pre-commit not found in PATH."
    exit 3
  fi

  local -r pip_compile="pip-compile --strip-extras --generate-hashes --reuse-hashes --upgrade --allow-unsafe"
  for py in python3.12 python3.11 python3.10 python3.9 python3.8 pypy3.10 pypy3.9; do
    if ! $py -m sysconfig >/dev/null; then
      log "Detected broken $py installation -> skipping"
      continue
    fi
    local manage_deps_env=".venv/deps/$py"
    log "Upgrading PyPI dependencies for $manage_deps_env..."
    [ -e "$manage_deps_env" ] || $py -m venv "$manage_deps_env"
    "$manage_deps_env/bin/pip" install --upgrade pip
    "$manage_deps_env/bin/pip" install --upgrade pip-tools
    mkdir -pv "dev-deps/$py"
    $manage_deps_env/bin/$pip_compile dev-deps/test.in -o "dev-deps/$py/test.txt" >/dev/null
    # Compile remaining layers just for our dev interpreter:
    if [ "$py" = "$DEV_PY" ]; then
      for i in docs dev; do
        $manage_deps_env/bin/$pip_compile "dev-deps/$i.in" -o "dev-deps/$py/$i.txt"
      done
    fi
  done
  "$DEV_VENV/bin/pip" install --upgrade pip-tools
  "$DEV_VENV/bin/pip-sync" dev-deps/$DEV_PY/{docs,test,dev}.txt
  "$DEV_VENV/bin/pip" install -e .
  log "Upgrading PyPI dependencies: Done"

  log "Upgrading pre-commit hooks..."
  pre-commit autoupdate
  log "Upgrading pre-commit hooks: Testing..."
  git add .
  pre-commit run --all-files

  log "Done."
  log "Reminders:"
  log " - Check release notes of upgraded packages for anything that affects bidict."
  log " - Run tests via 'tox' (or on GitHub Actions by pushing to @jab's 'deps' branch) to ensure everything still works."
  log " - Check output for any new warnings, not just test failures."
}

main
